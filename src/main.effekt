module main

import src/csvmanager
import src/puzzle
import src/board
import src/utils
import io/console
import src/fen
import src/progress


val red = "\u001b[31m"
val green = "\u001b[32m"
val reset = "\u001b[0m"


def main() = {
  var currentProgress = readProgress()
  var puzzlesSolved = 0
  var hardcore = false
  
  while(true) {
      println("")
      println("")
      println("Welcome to Chess Puzzles!")
      println("")
      println("Current mode: " ++ (if (hardcore) red ++ "HARDCORE" else green ++ "NORMAL") ++ reset ++ "(h to toggle)")
      
      val choice = showDifficultyMenu(currentProgress)
      choice match {
        case "h" =>         
        hardcore = not(hardcore)
        println(if (hardcore) 
          red ++ "Hardcore mode activated - Only one chance per move!" ++ reset
        else 
          green ++ "Normal mode activated - Two chances per move" ++ reset
        )
        case _ => ()
      }
      val (file, difficulty) = choice match {
        case "1" => if (isUnlocked(currentProgress, "easy")) ("easy.csv", "easy") else ("", "")
        case "2" => if (isUnlocked(currentProgress, "medium")) ("medium.csv", "medium") else ("", "")
        case "3" => if (isUnlocked(currentProgress, "hard")) ("hard.csv", "hard") else ("", "")
        case _ => ("", "")
      }
      
      if (file != "") {
        val puzzle = getRandomPuzzle(file)
        var p = Puzzle(puzzle.second, fenToBoard(puzzle.first), fenToColor(puzzle.first), hardcore)
        if (puzzle::playPuzzle(p)) {
          println("You solved the puzzle!")
          currentProgress = updateProgress(currentProgress, difficulty)
          saveProgress(currentProgress)
          puzzlesSolved = puzzlesSolved + 1
        }
      }
      
    
  }
}