module main // must be named same as the file! 

import src/lib
import string/tty
import char
import option
import list
import io/filesystem
import string
import io
import io/error
import exception

// Helper functions
//////////////////////////////////////////////////////////////////////////////////////////////////

//convert string to list of characters
def toCharList(str: String): List[Char] = {
  def go(index: Int): List[Char] = {
    with on[OutOfBounds].panic;
    if (index >= str.length) {
      []
    } else {
      val c = str.charAt(index)
      Cons(c, go(index + 1))
    }
  }
  go(0)
}

// Convert file letter (a-h) to index (0-7)
def fileToIndex(file: Char): Int = 
  file.toInt - 'a'.toInt

// Convert rank number (1-8) to index (0-7) 
def rankToIndex(rank: Char): Int =
  (rank.toInt - '0'.toInt) - 1

/// Map a function `f` over elements in a given list, providing both the index and element.
///
/// O(N)
def mapWithIndex[A, B](l: List[A]) { f: (Int, A) => B }: List[B] = {
  var acc = Nil[B]()
  var i = 0
  l.foreach { el => 
    acc = Cons(f(i, el), acc)
    i = i + 1
  }
  acc.reverse
}


// Types and Data Structures
type Piece {
  King(white: Bool)
  Queen(white: Bool)
  Rook(white: Bool)
  Bishop(white: Bool)
  Knight(white: Bool)
  Pawn(white: Bool)
}

record Board(cells: List[List[Option[Piece]]])

record Puzzle(fen: String, moves: List[String], board: Board)


// Moving pieces
//////////////////////////////////////////////////////////////////////////////////////////////////
 
// Make a single move on the board
def makeMove(board: Board, move: String): Board = {

  with on[OutOfBounds].panic
  // Convert algebraic notation
  val fromFile = fileToIndex(move.charAt(0))
  val fromRank = rankToIndex(move.charAt(1))
  val toFile = fileToIndex(move.charAt(2))
  val toRank = rankToIndex(move.charAt(3))

  // Get the moving piece
  val piece = list::get(list::get(board.cells, fromRank), fromFile)

  // Create new board with updated positions
  val newCells = board.cells.mapWithIndex { (r, rank) =>
    rank.mapWithIndex { (f, square) =>
      if (r == fromRank && f == fromFile) {
        None() // Clear source square
      } else if (r == toRank && f == toFile) {
        piece // Place piece at destination
      } else {
        square
      }
    }
  }
  
  Board(newCells)
}


// FEN parsing
def charToPiece(c: Char): Piece = {  
  c match {    
    case 'K' => King(true)
    case 'Q' => Queen(true)
    case 'R' => Rook(true)
    case 'B' => Bishop(true)
    case 'N' => Knight(true)
    case 'P' => Pawn(true)
    case 'k' => King(false)
    case 'q' => Queen(false)
    case 'r' => Rook(false)
    case 'b' => Bishop(false)
    case 'n' => Knight(false)
    case 'p' => Pawn(false)
    case _ => King(true) //TODO throw error
  }
}

def processRank(rank: String): List[Option[Piece]] = {
  var result = []
  val charList = toCharList(rank)
  // Process each character
  charList.foreach { c =>
    if (c >= '1' && c <= '8') {
      val emptyCount = c.toInt - '0'.toInt
      var i = 0
      while (i < emptyCount) {
        result = Cons(None(), result)
        i = i + 1
      }
    } else {
      val piece = charToPiece(c)
      result = Cons(Some(piece), result)
      ()
    }
  }
  return result.reverse()
} 


def fenToBoard(fen: String): Board = {

  with on[OutOfBounds].panic; //TODO NOT NICE

  val placement = fen.split(" ").get(0) //get moves
  val ranks = placement.split("/") // Split into ranks (rows)

  Board([
        processRank(list::get(ranks, 0)), 
        processRank(list::get(ranks, 1)), 
        processRank(list::get(ranks, 2)), 
        processRank(list::get(ranks, 3)), 
        processRank(list::get(ranks, 4)), 
        processRank(list::get(ranks, 5)), 
        processRank(list::get(ranks, 6)), 
        processRank(list::get(ranks, 7))])
  //TODO WITH MAP?
}


// printing


def pieceToSymbol(piece: Option[Piece]): String = {
  piece match {
    case None() => "."
    case Some(King(white)) => if (white) "K" else "k"
    case Some(Queen(white)) => if (white) "Q" else "q" 
    case Some(Rook(white)) => if (white) "R" else "r"
    case Some(Bishop(white)) => if (white) "B" else "b"
    case Some(Knight(white)) => if (white) "N" else "n"
    case Some(Pawn(white)) => if (white) "P" else "p"
  }
}

def printBoard(board: Board): Unit = {
  println("    a b c d e f g h")
  println("  ------------------")
  val rows = board.cells.map { row =>
    row.map { cell =>
      pieceToSymbol(cell)
    }.join(" ")
  }
  var counter = 1
  rows.foreach { row =>
    println(show(counter) ++ " | " ++ row)
    counter = counter + 1
  }
  println(" ")
  println(" ")
}



/**
def getRandomLine(str: String): List[Option[Int]] = {
  // Split by both Windows and Unix line endings
  val lines = str.string::split("\n")

  if (lines.length == 0) {
    return [None(), None(), None()]
  }
  
  // Handle empty string case
  // Get random index between 0 and lines.length - 1
  val randomIndex = (random() * lines.length.toDouble).toInt
  val randomIndex1 = (random() * lines.length.toDouble).toInt
  val randomIndex2 = (random() * lines.length.toDouble).toInt
  return [Some(randomIndex), Some(randomIndex1), Some(randomIndex2)]

}**/





def main() = {

  println("start")


  with on[IOError].panic; 
  
  with filesystem;        

  //val content = readFile("1.csv")
  //println(content.string::split("\n"))
   
  var b1 = fenToBoard("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 12")
  printBoard(b1)
  b1 = makeMove(b1, "h8e5")
  printBoard(b1)

  




    
 

  val b = Board([
    [Some(Rook(false)), Some(Knight(false)), Some(Bishop(false)), Some(Queen(false)), Some(King(false)), Some(Bishop(false)), Some(Knight(false)), Some(Rook(false))],
    [Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false)), Some(Pawn(false))],
    [None(), None(), None(), None(), None(), None(), None(), None()],
    [None(), None(), None(), None(), None(), None(), None(), None()],
    [None(), None(), None(), None(), None(), None(), None(), None()],
    [None(), None(), None(), None(), None(), None(), None(), None()],
    [Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true)), Some(Pawn(true))],
    [Some(Rook(true)), Some(Knight(true)), Some(Bishop(true)), Some(Queen(true)), Some(King(true)), Some(Bishop(true)), Some(Knight(true)), Some(Rook(true))]
  ])


  //printBoard(b)
  println("end")
  
}