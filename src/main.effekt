module main

import src/csvmanager
import src/puzzle
import src/board
import src/utils
import io/console
import src/fen
import src/progress


val red = "\u001b[31m"
val green = "\u001b[32m"
val reset = "\u001b[0m"



def main() = {
  var currentProgress = readProgress()
  var hardcore = false
  var deletePuzzles = true
  
  while(true) {
      println("")
      println("")
      println("Welcome to Chess Puzzles!")
      println("")
      println("Current mode: " ++ (if (hardcore) red ++ "HARDCORE" else green ++ "NORMAL") ++ reset ++ "(h to toggle)")
      println("Puzzle deletion: " ++ (if (deletePuzzles) green ++ "ON" else red ++ "OFF") ++ reset ++ " (d to toggle)")
      
      val choice = showDifficultyMenu(currentProgress)
      choice match {
        case "h" =>         
          hardcore = not(hardcore)
          println(if (hardcore) 
            red ++ "Hardcore mode activated - Only one chance per move!" ++ reset
          else 
            green ++ "Normal mode activated - Two chances per move" ++ reset
          )
        case "d" =>
          deletePuzzles = not(deletePuzzles)
          println(if (deletePuzzles)
            green ++ "Puzzle deletion activated" ++ reset
          else
            red ++ "Puzzle deletion deactivated" ++ reset
          )
        case _ => ()
      }
      val (file, difficulty) = choice match {
        case "1" => if (isUnlocked(currentProgress, "easy")) ("easy.csv", "easy") else ("", "")
        case "2" => if (isUnlocked(currentProgress, "medium")) ("medium.csv", "medium") else ("", "")
        case "3" => if (isUnlocked(currentProgress, "hard")) ("hard.csv", "hard") else ("", "")
        case _ => ("", "")
      }
      
      if (file != "") {
        var puzzle = ("", [])
        try{
          puzzle = getRandomPuzzle(file, deletePuzzles)
        }
        with InvalidPuzzle { (msg) =>
          println(red ++ msg ++ " using default puzzle" ++ reset)
          resume(("8/3N2k1/5b2/5R2/r5KP/8/8/8 w - - 3 48", ["g4h5", "a4h4"]))
        }
        var p = Puzzle(puzzle.second, fenToBoard(puzzle.first), fenToColor(puzzle.first), hardcore)
        try{
          puzzle::playPuzzle(p)
        }
        with PuzzleWon { () =>
          println(green ++ "🏆 Congratulations! Puzzle solved!" ++ reset)
          currentProgress = updateProgress(currentProgress, difficulty)
          saveProgress(currentProgress)
        }
        with PuzzleLost { (correctMove) =>
          println(red ++ "✗ Wrong! The correct move was: " ++ bold ++ correctMove ++ reset)
          currentProgress = removeProgress(currentProgress, difficulty)
          saveProgress(currentProgress)
        }
      }
  }
}