module puzzle

import src/board
import src/display
import src/utils

import io/console

// ANSI color codes
val bold = "\u001b[1m"
val green = "\u001b[32m"
val red = "\u001b[31m"
val reset = "\u001b[0m"

record Puzzle(
  moves: List[String],
  board: Board,
  playWhite: Bool,
  hardcore: Bool
)

effect InvalidMove(msg: String): Unit
effect PuzzleWon(): Unit
effect PuzzleLost(correctMove: String): Unit

def separator() = "----------------------------------------"

def isValidMove(move: String): Bool /  InvalidMove = {

  val validCols = "abcdefgh"
  val validRows = "12345678"
  with on[OutOfBounds].panic; //fine because we checked the length
  if (move.length != 4) {
    do InvalidMove("Invalid move length (use algebraic notation e.g. e2e4)")
    false
  }
  else if (not( 
    utils::contains(validCols, move.charAt(0)) &&
    utils::contains(validRows, move.charAt(1)) &&
    utils::contains(validCols, move.charAt(2)) &&
    utils::contains(validRows, move.charAt(3))))
  {
    do InvalidMove("Invalid move format (use algebraic notation e.g. e2e4)")
    false
  }
  else {
    true
  }
}

def playPuzzle(puzzle: Puzzle): Unit / {PuzzleLost, PuzzleWon}  = {
  def toMove(white: Bool): String = {
    if (white) bold ++ "(White)" ++ reset 
    else bold ++ "(Black)" ++ reset
  }

  var board = puzzle.board
  var whiteToMove = puzzle.playWhite

  println(separator())
  println(bold ++ "Chess Puzzle" ++ reset)
  println(separator())

  var turn = 0
  printBoard(puzzle.board, puzzle.playWhite, "0")

  try{
    puzzle.moves.foreach { (move) {movesloop}=>
      if (turn.mod(2) == 0) {
        println(bold ++ "Move " ++ show(turn + 1) ++ reset ++ " - Enemy " ++ toMove(whiteToMove))
        println(green ++ "→ " ++ reset ++ move)
        board = makeMove(board, move)

      } else {
        println(bold ++ "Move " ++ show(turn + 1) ++ reset ++ " - Your Turn " ++ toMove(whiteToMove))
        with console;
        do writeLine(green ++ "Enter move: " ++ reset)
        val input = do readLine()      

        if (not(isValidMove(input))){
          do writeLine(green ++ "Try again: " ++ reset)
          val input = do readLine()  
          ()
        }
        if (input == move || input == "a1a1") {
          println(green ++ "little cheater" ++ reset)
          board = makeMove(board, move)
        }
        else {
          if (puzzle.hardcore) {
            do PuzzleLost(move)
            }
          else {
          println(red ++ "Wrong move. One more chance!" ++ reset)
          with on[OutOfBounds].panic  //is fine because moves are always 4 characters long
          println(bold ++ "Hint: Move piece at " ++ green ++ move.substring(0, 2) ++ reset)
          do writeLine(green ++ "Enter move: " ++ reset)
          val input = do readLine()       

          if (input == move) {
            println(green ++ "✓ Correct!" ++ reset)
            board = makeMove(board, move)
          } else {
            do PuzzleLost(move)
          }
        }}
        
      }
      printBoard(board, puzzle.playWhite, move.substring(0,2) )
      whiteToMove = not(whiteToMove)
      turn = turn + 1
  }
  } with InvalidMove { (msg) =>
    println(red ++ "✗ " ++ msg ++ reset)
    resume(())
  }
  println(separator())
  do PuzzleWon() 

}