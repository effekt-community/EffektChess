module puzzle

import src/board
import src/pieces
import src/display
import src/utils

import io/console

record Puzzle(
  moves: List[String],
  board: Board,
  playWhite: Bool
)

def isValidMove(move: String): Bool = {

  var valid = false

  if (move.length == 4){
    val validCols = "abcdefgh"
    val validRows = "12345678"
    with on[OutOfBounds].panic; //fine because we checked the length
    if(
    utils::contains(validCols, move.charAt(0)) && 
    utils::contains(validRows, move.charAt(1)) && 
    utils::contains(validCols, move.charAt(2)) && 
    utils::contains(validRows, move.charAt(3)))
    {
      valid = true
    }
  }
  return valid

}

def minimalWorkingProduct(puzzle: Puzzle): Bool = {
  def toMove (white: Bool): String = {if (white) "(White)" else "(Black)"}
  var lost = false
  var board = puzzle.board
  var whiteToMove = puzzle.playWhite
  println("start ------------------------")
  var turn = 0
  printBoard(puzzle.board)
  puzzle.moves.foreach { (move) {movesloop}=>
    if (turn.mod(2) == 0) {
      println("Enemies turn. " ++ toMove(whiteToMove) ++ " he moved: " ++ move)
      board = makeMove(board, move)
    } else {
      println("Your turn. " ++ toMove(whiteToMove))
      with console;
      do writeLine("Enter a move: ") 
      val input = do readLine()       
      println("You entered: " ++ input)
      if (not(isValidMove(input))){
        println("Please enter a chess move in algebraic notation. Example: e2e4")
        do writeLine("Enter a move: ") 
        val input = do readLine()       
        println("You entered: " ++ input)
      }
      if (input == move || input == "a1a1") {
        board = makeMove(board, move)
      }
      else {
        with on[OutOfBounds].panic  //is fine because moves are always 4 characters long
        println("Wrong move. You have one more chance.")
        println("Tipp: you have to move the piece on " ++ move.substring(0, 2))
        do writeLine("Enter a move: ") 
        val input = do readLine()       
        println("You entered: " ++ input)
        if (input == move) {
          board = makeMove(board, move)
        }
        else {
          println("You lost. The correct move was: " ++ move)
          lost = true
          movesloop.break()
        }
      }
      
    }
    printBoard(board)
    whiteToMove = not(whiteToMove)
    turn = turn + 1
  }
  if (not(lost)){
    println("You won!")
    return true
  }
  else {
    return false
  }
  

}