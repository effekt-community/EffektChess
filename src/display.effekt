module display

import src/board
import src/pieces
import src/utils

def printBoard(board: Board, whiteView: Bool, sourceTile: String): Unit = {
  var linebreak = 0
  var isWhite = false
  
  // Colors
  val tblack = "\u001b[31m"   // Black text
  val twhite = "\u001b[36m"   // White text
  val bgBlack = "\u001b[40m"  // Black background
  val bgWhite = "\u001b[47m"  // White background
  val reset = "\u001b[0m"     // Reset

  def pieceToSymbol(piece: Option[Piece], pos: String): String = {
    if (linebreak.mod(8) == 0) { isWhite = not(isWhite) }
    linebreak = linebreak + 1
    isWhite = not(isWhite)

    var bg = if (isWhite) bgWhite else bgBlack
    if (sourceTile == pos) {
      bg = bg ++ "\u001b[4m"
    }

    piece match {
      case None() => bg ++ "   " ++ reset
      case Some(King(white)) => bg ++ (if (white) twhite else tblack) ++ " ♚ " ++ reset
      case Some(Queen(white)) => bg ++ (if (white) twhite else tblack) ++ " ♛ " ++ reset
      case Some(Rook(white)) => bg ++ (if (white) twhite else tblack) ++ " ♜ " ++ reset
      case Some(Bishop(white)) => bg ++ (if (white) twhite else tblack) ++ " ♝ " ++ reset
      case Some(Knight(white)) => bg ++ (if (white) twhite else tblack) ++ " ♞ " ++ reset
      case Some(Pawn(white)) => bg ++ (if (white) twhite else tblack) ++ " ♟ " ++ reset
    }
  }

  println("     " ++ (if (not(whiteView)) "a  b  c  d  e  f  g  h" else "h  g  f  e  d  c  b  a"))
  println("  __________________________")

  var counter = if (not(whiteView)) 8 else 1
  
  if (not(whiteView)) {
    var row_idx = 8
    board.cells.foreach { row => 
      var rowString = show(counter) ++ " | "
      var col_idx = 0
      row.foreach { piece => 
        val pos = utils::numToCol(col_idx) ++ show(row_idx)
        rowString = rowString ++ pieceToSymbol(piece, pos)
        col_idx = col_idx + 1
      }
      println(rowString)
      counter = counter - 1
      row_idx = row_idx - 1
    }
  } else {
    var row_idx = 1
    board.cells.reverse.foreach { row =>
      var rowString = show(counter) ++ " | "
      var col_idx = 7
      row.reverse.foreach { piece => 
        val pos = utils::numToCol(col_idx) ++ show(row_idx)
        rowString = rowString ++ pieceToSymbol(piece, pos) 
        col_idx = col_idx - 1
      }
      println(rowString)
      counter = counter + 1
      row_idx = row_idx + 1
    }
  }
  println(" ")
}