module display

import src/board
import src/pieces

val whiteBg = "◻️"
val blackBg = "◼️"

def printBoard(board: Board, whiteView: Bool): Unit = {
  var linebreak = 0
  var isWhite = false;
  val tblack = "\u001b[34m"    // Black text
  val twhite = "\u001b[37m"    // White text 
  val reset = "\u001b[0m"

  def pieceToSymbol(piece: Option[Piece]): String = {
    if (linebreak.mod(8) == 0){isWhite = not(isWhite)}
    linebreak = linebreak + 1
    isWhite = not(isWhite)

    piece match {
      case None() => if (isWhite) {blackBg} else whiteBg
      case Some(King(white)) => if (white) twhite ++ "♔" ++ reset else tblack ++ "♔" ++ reset
      case Some(Queen(white)) => if (white) twhite ++ "♕" ++ reset else tblack ++ "♕" ++ reset
      case Some(Rook(white)) => if (white) twhite ++ "♖" ++ reset else tblack ++ "♖" ++ reset
      case Some(Bishop(white)) => if (white) twhite ++ "♗" ++ reset else tblack ++ "♗" ++ reset
      case Some(Knight(white)) => if (white) twhite ++ "♘" ++ reset else tblack ++ "♘" ++ reset
      case Some(Pawn(white)) => if (white) twhite ++ "♙" ++ reset else tblack ++ "♙" ++ reset
    }
  }
  println("     " ++ (if (not(whiteView)) "a b c d e f g h" else "h g f e d c b a"))
  println("  ------------------")

  var counter = if (not(whiteView)) 8 else 1
  
  if (not(whiteView)) {
    board.cells.foreach { row => 
      var rowString = show(counter) ++ " | "
      row.foreach { piece => 
        rowString = rowString ++ pieceToSymbol(piece) ++ " "
      }
      println(rowString)
      counter = counter - 1
    }
  } else {
    board.cells.reverse.foreach { row =>
      var rowString = show(counter) ++ " | "
      row.reverse.foreach { piece => 
        rowString = rowString ++ pieceToSymbol(piece) ++ " "
      }
      println(rowString)
      counter = counter + 1
    }
  }
  println(" ")
}