module display

import src/board
import src/pieces

val whiteBg = "◻️"
val blackBg = "◼️"

def printBoard(board: Board): Unit = {
  var linebreak = 0
  var isWhite = false;
  val tblack = "\u001b[34m"    // Black text
  val twhite = "\u001b[37m"    // White text 
  val reset = "\u001b[0m"

  def pieceToSymbol(piece: Option[Piece]): String = {
    if (linebreak.mod(8) == 0){isWhite = not(isWhite)}
    linebreak = linebreak + 1
    isWhite = not(isWhite)

    piece match {
      case None() => if (isWhite) {blackBg} else whiteBg
      case Some(King(white)) => if (white) twhite ++ "♔" ++ reset else tblack ++ "♔" ++ reset
      case Some(Queen(white)) => if (white) twhite ++ "♕" ++ reset else tblack ++ "♕" ++ reset
      case Some(Rook(white)) => if (white) twhite ++ "♖" ++ reset else tblack ++ "♖" ++ reset
      case Some(Bishop(white)) => if (white) twhite ++ "♗" ++ reset else tblack ++ "♗" ++ reset
      case Some(Knight(white)) => if (white) twhite ++ "♘" ++ reset else tblack ++ "♘" ++ reset
      case Some(Pawn(white)) => if (white) twhite ++ "♙" ++ reset else tblack ++ "♙" ++ reset
    }
  }
  println("     a b c d e f g h")
  println("  ------------------")
  val rows = board.cells.map { row =>
    row.map { cell =>
      pieceToSymbol(cell)
      
    }.join(" ")
  }
  var counter = 8
  rows.foreach { row =>
    println(show(counter) ++ " | " ++ row)
    counter = counter - 1
  }
  println(" ")
}