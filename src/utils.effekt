module utils

def mapWithIndex[A, B](l: List[A]) { f: (Int, A) => B }: List[B] = {
  var acc = Nil[B]()
  var i = 0
  l.foreach { el => 
    acc = Cons(f(i, el), acc)
    i = i + 1
  }
  acc.reverse
}

def toCharList(str: String): List[Char] = {
  def go(index: Int): List[Char] = {
    with on[OutOfBounds].panic; //is fine because were in a loop
    if (index >= str.length) {
      []
    } else {
      val c = str.charAt(index)
      Cons(c, go(index + 1))
    }
  }
  go(0)
}


def contains(string: String, char: Char): Bool = {
  val charlist = string.toCharList()
  var contains = false
  charlist.foreach { (x) {l} =>
    if (x == char) {
      contains = true
      l.break()
    }
  }
  return contains
}

def numToCol(num: Int): String = {
  num match {
    case 0 => "a"
    case 1 => "b" 
    case 2 => "c"
    case 3 => "d"
    case 4 => "e"
    case 5 => "f"
    case 6 => "g"
    case 7 => "h"
    case _ => "x" 
  }
}