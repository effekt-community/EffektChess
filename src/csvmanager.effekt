module csvmanager

import io/filesystem
import io/error
import string
import list
import src/utils


effect InvalidPuzzle(msg: String): (String, List[String])

val defaultPuzzle = ("8/3N2k1/5b2/5R2/r5KP/8/8/8 w - - 3 48", ["g4h5", "a4h4"])

def getRandomPuzzle(path: String, deletePuzzle: Bool): (String, List[String]) / InvalidPuzzle = {

  with on[IOError].default { 
    do InvalidPuzzle("Could not read puzzle file")
    defaultPuzzle 
  }
  with on[OutOfBounds].default {
    do InvalidPuzzle("Invalid puzzle format")
    defaultPuzzle
  }


  val fileContent = readFile(path)
  val lines = fileContent.split("\n")
  
  // Skip header row and get random line
  val header = lines.get(0)
  val puzzles = lines.drop(1)
  val randomIndex = floor(random() * puzzles.size.toDouble) 
  
  val selectedLine = puzzles.get(randomIndex)

  def buildNewList(index: Int, acc: List[String]): List[String] = {
    if (index >= puzzles.size) {
      acc.reverse
    } else if (index == randomIndex) {
      buildNewList(index + 1, acc)
    } else {
      buildNewList(index + 1, Cons(puzzles.get(index), acc))
    }
  }

  if (deletePuzzle) {
    val remainingPuzzles = buildNewList(0, Nil())
    val newContent = header ++ "\n" ++ remainingPuzzles.join("\n")
    writeFile(path, newContent)
  }

  val fields = selectedLine.split(",")
  val movesString = fields.get(2)
  val movesArray = movesString.split(" ") 
  
  
  (fields.get(1), movesArray) // Return (FEN, Moves)

}
  

